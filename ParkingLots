import java.util.ArrayList;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

/**
 * Created by sun on 16-12-5.
 */
//进入停车场的车辆线程
class InCars extends Thread
{
    //声明一个类引用的共享资源
    private BlockingQueue<Integer> bq;
    public InCars(BlockingQueue<Integer> bq)
    {
        //通过构造器传入共享资源
        this.bq=bq;
    }
    public void run()
    {
        //定义一个车辆数组
        int[] car=new int[99];
        for (int i=0;i<car.length;i++)
        {

            try
            {
                Thread.sleep(20);
                //尝试进入停车场，如果停车场已满，则线程阻塞
                bq.put(i);
                System.out.println(i+"号车进入停车场");
            }
            catch(Exception ex)
            {
                ex.printStackTrace();
            }
        }
    }
}
//从停车场出去的车的线程
class OutCar extends Thread
{
    //
    private BlockingQueue<Integer> bq;
    public OutCar(BlockingQueue<Integer> bq)
    {
        this.bq=bq;
    }
    public void run()
    {
        while(true)
        {
            try
            {
                Thread.sleep(1000);
                //尝试把车从停车场开出，如果停车场没有车辆，阻塞线程
                System.out.println(bq.take().byteValue()+"号车已经开出");
            }
            catch (Exception ex)
            {
                ex.printStackTrace();
            }
        }
    }
}
public class ParkingLots {
    public static void main(String[] args){
        //创建一个容量为3的停车场
    BlockingQueue<Integer> bq=new ArrayBlockingQueue<Integer>(3);
    //启动停车线程
    new InCars(bq).start();
    //启动出车线程
    new OutCar(bq).start();

}
}
